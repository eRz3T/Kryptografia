1. Algorytm szyfrowania transpozycyjnego
Opis szyfru transpozycyjnego
Szyfr transpozycyjny jest jednym z klasycznych algorytmów szyfrowania, który polega na przestawianiu znaków w wiadomości na podstawie określonego schematu (klucza). Nie zmienia on samych znaków, lecz ich kolejność.

Działanie algorytmu szyfrowania:

Wiadomość jest dzielona na kolumny według podanej liczby kolumn (klucz szyfrujący).
Litery są wpisywane kolejno w kolumny.
Po wypełnieniu tabeli odczytuje się tekst kolumnami, a wynik łączy w ciąg znaków.
Działanie algorytmu deszyfrowania:

Odszyfrowanie polega na odwrotnym odtworzeniu tabeli.
Wiadomość jest odczytywana kolumnami i przekształcana z powrotem na tekst odczytywany wierszami.
2. Jak działa szyfr transpozycyjny w programie
Szyfrowanie (Funkcja encrypt_message)
Dodanie wypełnienia (padding):
Jeśli długość wiadomości nie jest wielokrotnością klucza (liczby kolumn), dodawane są puste znaki (' '), aby wypełnić tabelę.
Tworzenie kolumn:
Tworzona jest lista kolumn o liczbie elementów równej kluczowi.
Wiadomość jest wypełniana literami kolejno w kolumnach.
Generowanie szyfrogramu:
Kolumny są odczytywane jedna po drugiej, a znaki są łączone w zaszyfrowany ciąg.
Deszyfrowanie (Funkcja decrypt_message)
Rekonstrukcja tabeli:
Obliczana jest liczba kolumn i wierszy na podstawie długości wiadomości i klucza.
Wyznacza się również liczbę "pustych miejsc" w tabeli, które nie były używane (shaded boxes).
Odtworzenie wiadomości:
Wiadomość jest odczytywana kolumnami i wypełniana wierszami, odtwarzając oryginalny układ liter.
3. Jak funkcjonuje program
Program umożliwia szyfrowanie i deszyfrowanie wiadomości oraz plików tekstowych przy użyciu szyfru transpozycyjnego. Posiada prosty interfejs graficzny zbudowany w bibliotece Tkinter.

Moduły programu
encrypt.py:

Implementuje szyfrowanie wiadomości (encrypt_message) i plików (encrypt_text_file) za pomocą szyfru transpozycyjnego.
Odczytuje zawartość pliku wejściowego, szyfruje ją i zapisuje wynik do pliku wyjściowego.
decrypt.py:

Implementuje deszyfrowanie wiadomości (decrypt_message) i plików (decrypt_text_file).
Odczytuje zawartość zaszyfrowanego pliku, deszyfruje ją i zapisuje wynik do pliku wyjściowego.
gui.py:

Oferuje graficzny interfejs użytkownika.
Umożliwia:
Wybór pliku wejściowego i wyjściowego.
Podanie klucza (liczby kolumn).
Szyfrowanie tekstu wpisanego w polu tekstowym.
Funkcjonalności programu
Szyfrowanie wiadomości i plików:

Program szyfruje tekst (wiadomość lub zawartość pliku) za pomocą szyfru transpozycyjnego.
Wymaga podania klucza (liczby kolumn).
Deszyfrowanie wiadomości i plików:

Program odszyfrowuje zaszyfrowane wiadomości lub pliki.
Wymaga tego samego klucza, który był użyty do szyfrowania.
Szyfrowanie tekstu wpisanego przez użytkownika:

Użytkownik może wpisać tekst w GUI, podać klucz i zapisać wynik w pliku.
Wygodne wybieranie plików:

Dzięki oknom dialogowym użytkownik może łatwo wybierać pliki wejściowe i wyjściowe.
Procesy obsługiwane przez GUI
Szyfrowanie pliku:

Użytkownik wybiera plik do zaszyfrowania, podaje klucz i lokalizację pliku wyjściowego.
Program szyfruje zawartość pliku i zapisuje zaszyfrowany tekst.
Deszyfrowanie pliku:

Użytkownik wybiera zaszyfrowany plik, podaje klucz i lokalizację pliku wyjściowego.
Program deszyfruje zawartość pliku i zapisuje wynik.
Szyfrowanie tekstu:

Użytkownik wpisuje tekst w polu tekstowym.
Program szyfruje tekst za pomocą podanego klucza i zapisuje wynik w pliku.
4. Przykłady działania programu
Szyfrowanie wiadomości
Dane wejściowe:

Wiadomość: HELLO WORLD
Klucz: 4
Działanie algorytmu:

Wiadomość jest wpisywana do tabeli o 4 kolumnach:
mathematica
Skopiuj kod
H E L L
O   W O
R L D  
Tekst odczytywany kolumnami: HORW ELLL OLD .
Wynik szyfrowania: HORWELLLOLD

Deszyfrowanie wiadomości
Dane wejściowe:

Szyfrogram: HORWELLLOLD
Klucz: 4
Działanie algorytmu:

Odtworzenie tabeli o 4 kolumnach:
mathematica
Skopiuj kod
H E L L
O   W O
R L D  
Tekst odczytywany wierszami: HELLO WORLD.
Wynik deszyfrowania: HELLO WORLD