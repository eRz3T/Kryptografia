1. Algorytm AES (Advanced Encryption Standard)
AES (Advanced Encryption Standard) to symetryczny algorytm szyfrowania, który działa na blokach danych i jest szeroko stosowany w zabezpieczaniu informacji. W tym programie używany jest tryb CFB (Cipher Feedback Mode), który działa w sposób strumieniowy, co oznacza, że może szyfrować dane o dowolnej długości, nawet jeśli nie są one wielokrotnością rozmiaru bloku.

Tryb CFB (Cipher Feedback Mode):
Cechy trybu CFB:

Tryb strumieniowy: dane są szyfrowane blokami, ale nie wymagają dokładnej długości (np. 16 bajtów).
Wykorzystuje IV (Initialization Vector), który musi być unikalny dla każdego szyfrowania.
Dane są szyfrowane i przesyłane jako strumień.
Proces szyfrowania:

Losowo generowany jest IV o długości 16 bajtów.
Pierwszy blok danych jest szyfrowany za pomocą klucza AES i IV.
Wynik szyfrowania (strumień) jest XOR-owany z danymi, tworząc zaszyfrowany blok.
Kolejne bloki są szyfrowane na podstawie poprzednich wyników.
Proces deszyfrowania:

IV jest odczytywany z początkowych 16 bajtów strumienia zaszyfrowanego.
Każdy blok danych jest odszyfrowywany w sposób odwrotny, przy użyciu tego samego klucza i trybu CFB.
Dane odzyskuje się, XOR-ując strumień szyfrowania z zaszyfrowanymi danymi.
Bezpieczeństwo:
Klucz AES musi mieć 256 bitów (32 bajty).
IV jest unikalny dla każdego szyfrowania, co chroni przed atakami opartymi na analizie powtarzalności danych.
2. Funkcjonowanie programu
Program implementuje szyfrowanie i deszyfrowanie plików w trybie strumieniowym AES przy użyciu GUI opartego na Tkinter. Składa się z trzech modułów:

Moduł 1: encrypt.py – Szyfrowanie plików
Funkcjonalność:

Szyfruje dane wejściowe w trybie strumieniowym AES (CFB).
Generuje losowy IV (16 bajtów), który jest dodawany na początku zaszyfrowanego strumienia.
Wynikiem jest strumień danych składający się z IV oraz zaszyfrowanej zawartości.
Proces:

Odczytuje dane z pliku wejściowego w trybie binarnym.
Tworzy instancję szyfru AES z podanym kluczem i losowym IV.
Szyfruje dane i zapisuje wynik (IV + zaszyfrowane dane) do pliku wyjściowego.
Moduł 2: decrypt.py – Deszyfrowanie plików
Funkcjonalność:

Deszyfruje strumień zaszyfrowanych danych, odzyskując oryginalne dane.
Używa pierwszych 16 bajtów (IV) strumienia zaszyfrowanego oraz klucza AES do odszyfrowania danych.
Proces:

Odczytuje dane zaszyfrowane z pliku.
Wyodrębnia IV z początkowych 16 bajtów.
Tworzy instancję szyfru AES z podanym kluczem i odczytanym IV.
Deszyfruje dane i zapisuje wynik do pliku wyjściowego.
Moduł 3: gui.py – Graficzny interfejs użytkownika
Funkcjonalność:

Umożliwia użytkownikowi:
Wybór pliku do zaszyfrowania lub odszyfrowania.
Wprowadzenie klucza AES (32 znaki).
Zapis wyników w wybranym miejscu na dysku.
Waliduje długość klucza (musi mieć dokładnie 32 znaki).
Informuje użytkownika o powodzeniu operacji.
Proces:

Użytkownik wybiera opcję szyfrowania lub deszyfrowania.
Program wyświetla okna dialogowe do wyboru plików i lokalizacji zapisu.
Użytkownik wprowadza klucz AES. Jeśli klucz jest prawidłowy:
W przypadku szyfrowania:
Odczytuje dane z pliku, szyfruje je za pomocą encrypt_stream i zapisuje wynik.
W przypadku deszyfrowania:
Odczytuje dane z pliku, deszyfruje je za pomocą decrypt_stream i zapisuje wynik.
Program informuje użytkownika o zakończeniu operacji.
3. Struktura działania
Szyfrowanie pliku:
Użytkownik wprowadza klucz (lub program generuje go w inny sposób).
IV jest generowany losowo i dołączany na początku zaszyfrowanego strumienia.
Dane są szyfrowane w trybie CFB.
Zaszyfrowany strumień jest zapisywany do pliku.
Deszyfrowanie pliku:
IV jest odczytywany z początkowych 16 bajtów pliku.
Dane są deszyfrowane na podstawie klucza i IV.
Oryginalna zawartość jest zapisywana do pliku wyjściowego.
Interakcja użytkownika:
GUI ułatwia korzystanie z programu bez konieczności znajomości jego wewnętrznego działania.
Użytkownik może wybrać pliki i klucz w sposób intuicyjny.