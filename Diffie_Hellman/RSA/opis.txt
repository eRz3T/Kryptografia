1. Algorytmy RSA i AES oraz ich zastosowanie
RSA (Rivest–Shamir–Adleman)
RSA to algorytm szyfrowania asymetrycznego, który opiera się na dwóch kluczach:

Klucz publiczny: Używany do szyfrowania danych i jest jawny.
Klucz prywatny: Używany do deszyfrowania danych i jest tajny.
RSA działa na zasadzie trudności rozkładu dużych liczb na czynniki pierwsze. Dzięki temu możliwe jest bezpieczne przesyłanie informacji w niezabezpieczonym kanale komunikacyjnym.

Zastosowanie RSA w programie:

Generowanie pary kluczy (publicznego i prywatnego).
Szyfrowanie klucza AES lub tekstu przy użyciu klucza publicznego.
Deszyfrowanie klucza AES lub tekstu za pomocą klucza prywatnego.
AES (Advanced Encryption Standard)
AES to algorytm szyfrowania symetrycznego, który wykorzystuje jeden klucz do szyfrowania i deszyfrowania danych. W programie zastosowano:

Tryb EAX: Zapewnia poufność (szyfrowanie danych) i integralność (sprawdzenie, czy dane nie zostały zmodyfikowane).
Zastosowanie AES w programie:

Szyfrowanie danych (plików) za pomocą losowo generowanego klucza AES.
Deszyfrowanie danych przy użyciu tego samego klucza AES.
Szyfrowanie hybrydowe (RSA + AES)
Szyfrowanie hybrydowe łączy zalety obu algorytmów:

RSA: Służy do bezpiecznego szyfrowania klucza AES, dzięki czemu klucz ten może być przesłany w niezabezpieczonym kanale.
AES: Służy do szyfrowania rzeczywistych danych, co jest znacznie szybsze i bardziej wydajne niż RSA.
Proces szyfrowania hybrydowego:

Generowanie losowego klucza AES i szyfrowanie nim danych (plików).
Szyfrowanie klucza AES za pomocą klucza publicznego RSA.
Zapisanie zaszyfrowanego klucza AES, danych (szyfrogramu) oraz parametrów AES (Nonce, Tag) do pliku.
Proces deszyfrowania hybrydowego:

Odczytanie klucza AES i jego deszyfrowanie za pomocą klucza prywatnego RSA.
Użycie klucza AES do odszyfrowania danych (plików).
2. Funkcjonowanie programu
Program implementuje szyfrowanie i deszyfrowanie tekstu oraz plików przy użyciu RSA i AES. Umożliwia także generowanie pary kluczy RSA. Program działa w środowisku graficznym zbudowanym na bibliotece Tkinter.

Moduły programu:
encrypt.py: Zawiera funkcje do:

Generowania kluczy RSA.
Szyfrowania tekstu za pomocą RSA.
Szyfrowania plików w sposób hybrydowy (RSA + AES).
decrypt.py: Zawiera funkcje do:

Deszyfrowania tekstu przy użyciu klucza prywatnego RSA.
Deszyfrowania plików w sposób hybrydowy (RSA + AES).
gui.py: Oferuje graficzny interfejs użytkownika umożliwiający:

Generowanie kluczy RSA.
Szyfrowanie tekstu i plików.
Deszyfrowanie plików (wybór między RSA a hybrydowym RSA + AES).
Procesy obsługiwane przez program:
Generowanie kluczy RSA:

Program tworzy parę kluczy RSA (2048-bitowe).
Klucze są zapisywane do plików private_key.pem i public_key.pem.
Użytkownik jest informowany o sukcesie operacji.
Szyfrowanie tekstu:

Użytkownik wpisuje tekst w GUI.
Tekst jest szyfrowany przy użyciu klucza publicznego RSA.
Wynik jest zapisywany w pliku.
Szyfrowanie plików:

Program wykorzystuje szyfrowanie hybrydowe:
Dane są szyfrowane za pomocą AES.
Klucz AES jest szyfrowany RSA.
Zaszyfrowane dane są zapisywane w pliku wyjściowym.
Deszyfrowanie plików:

Użytkownik wybiera, czy plik był szyfrowany RSA, czy w sposób hybrydowy.
Program deszyfruje klucz AES (jeśli hybrydowo) i dane.
Interakcja użytkownika z GUI:
Generowanie kluczy:

Użytkownik klika przycisk „Generuj klucze RSA”.
Program zapisuje klucze w plikach i wyświetla komunikat o sukcesie.
Szyfrowanie tekstu:

Użytkownik wpisuje tekst w polu tekstowym i klika „Zaszyfruj tekst i zapisz do pliku”.
Program zapisuje zaszyfrowany tekst w wybranym pliku.
Szyfrowanie plików:

Użytkownik wybiera plik do zaszyfrowania i lokalizację pliku wynikowego.
Program szyfruje plik i zapisuje wynik.
Deszyfrowanie plików:

Użytkownik wybiera plik zaszyfrowany i metodę deszyfrowania (RSA lub hybrydowe).
Program deszyfruje plik i zapisuje wynik.
