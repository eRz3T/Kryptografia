1. Algorytm monoalfabetyczny
Czym jest szyfr monoalfabetyczny?
Szyfr monoalfabetyczny to rodzaj klasycznego szyfru podstawieniowego, w którym każda litera alfabetu jest zastępowana inną literą na podstawie ustalonego klucza. Klucz jest permutacją alfabetu, co oznacza, że każda litera oryginalna ma unikalną odpowiedniczkę w szyfrogramie.

Przykład szyfru monoalfabetycznego:

Alfabet: abcdefghijklmnopqrstuvwxyz
Klucz: qwertyuiopasdfghjklzxcvbnm
Jeśli oryginalny tekst to: hello, to po zaszyfrowaniu (na podstawie klucza) wynik to: itssg.

Zasada działania algorytmu
Szyfrowanie:

Dla każdej litery tekstu wejściowego:
Sprawdź jej odpowiednik w kluczu szyfrowania.
Zamień literę na odpowiadającą jej literę z klucza.
Znaki inne niż litery (np. cyfry, spacje, znaki interpunkcyjne) pozostają bez zmian.
Wszystkie litery są konwertowane na małe litery, aby uniknąć problemów z wielkością liter.
Deszyfrowanie:

Stwórz odwrotny klucz, w którym każdej literze z klucza szyfrowania odpowiada litera oryginalnego alfabetu.
Postępuj analogicznie jak podczas szyfrowania, ale używając klucza deszyfrowania.
2. Jak funkcjonuje program
Program umożliwia szyfrowanie i deszyfrowanie tekstów oraz plików za pomocą szyfru monoalfabetycznego. Posiada prosty graficzny interfejs użytkownika (GUI), który upraszcza interakcję.

Moduły programu
encrypt.py:

Implementuje funkcję tworzenia klucza szyfrującego i szyfrowania tekstu oraz plików.
Działa w trybie wsadowym (szyfrowanie plików).
decrypt.py:

Tworzy odwrotny klucz na podstawie klucza szyfrującego i odszyfrowuje tekst lub pliki.
Działa w trybie wsadowym (deszyfrowanie plików).
gui.py:

Udostępnia graficzny interfejs użytkownika, umożliwiający:
Szyfrowanie i deszyfrowanie tekstu wpisanego przez użytkownika.
Szyfrowanie i deszyfrowanie plików tekstowych.
Wygodne zarządzanie kluczami szyfrującymi.
Procesy obsługiwane przez program
Szyfrowanie tekstu:

Użytkownik wprowadza tekst do pola tekstowego.
Podaje klucz (26-znakowy ciąg).
Program generuje mapowanie liter alfabetu na podstawie klucza i szyfruje każdą literę.
Wynik można zapisać do pliku.
Deszyfrowanie tekstu:

Użytkownik wprowadza zaszyfrowany tekst.
Podaje ten sam klucz, który był używany podczas szyfrowania.
Program tworzy odwrotny klucz i odszyfrowuje tekst.
Szyfrowanie pliku:

Użytkownik wybiera plik wejściowy i podaje ścieżkę do pliku wyjściowego.
Program odczytuje zawartość pliku, szyfruje go na podstawie klucza i zapisuje wynik.
Deszyfrowanie pliku:

Użytkownik wybiera plik zaszyfrowany i podaje ścieżkę do pliku odszyfrowanego.
Program odczytuje zawartość pliku, odszyfrowuje go na podstawie klucza i zapisuje wynik.
Interfejs użytkownika (GUI)
Elementy interfejsu:

Pola tekstowe:
Do wprowadzenia tekstu do szyfrowania/odszyfrowania.
Do podania klucza szyfrującego.
Przyciski:
Szyfruj plik.
Deszyfruj plik.
Szyfruj tekst do pliku.
Deszyfruj tekst do pliku.
Opcje wyboru plików:
Umożliwiają wybór pliku wejściowego i ścieżki pliku wyjściowego.
Działanie interfejsu:

Użytkownik wybiera operację (szyfrowanie lub deszyfrowanie).
Program wykonuje odpowiednią funkcję z modułów encrypt.py lub decrypt.py.
Wynikiem jest zaszyfrowany/odszyfrowany tekst lub plik.
3. Przykład działania programu
Szyfrowanie tekstu:
Dane wejściowe:

Tekst: hello world
Klucz: qwertyuiopasdfghjklzxcvbnm
Działanie:

Dla każdej litery tekstu wejściowego:
h → i
e → t
l → s
o → g
w → v
r → k
d → r
Wynikowy tekst: itssg vgksr.
Deszyfrowanie tekstu:
Dane wejściowe:

Zaszyfrowany tekst: itssg vgksr
Klucz: qwertyuiopasdfghjklzxcvbnm
Działanie:

Tworzenie odwrotnego klucza:
q → a
w → b
e → c
...
Dla każdej litery szyfrogramu:
i → h
t → e
s → l
g → o
v → w
k → r
r → d
Wynikowy tekst: hello world.